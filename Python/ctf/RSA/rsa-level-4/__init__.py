# common modulus attack
from math import isqrt

from gmpy2 import iroot
import os
os.environ['PWNLIB_NOTERM'] = 'True'  # Configuration patch to allow pwntools to be run inside of an IDE
os.environ['PWNLIB_SILENT'] = 'True'


# Extended Euclidean greatest common divisor algorithm
def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def common_modulus_attack():
    n = 136372941954692995052032614106416002216650352281441768759106047115825257661310123118558086046873251952204915740853517008372422353621244931366409094731856824295828106036399145756514345255241109944294641060644246049854296519101775880563276657142059245230769447888021843340822736997057074223723734593369646608283
    c_list = [88934261481985787316571946676203348514352494646042103159736155624287938096099586834729171652139440814472420307071476143907698982272593448957770236088603490101924827608944006107576740571416087954304061091614594794358854353419664581332745351113861171522629631586344259719016707622211007808872462656489173218734, 31191490339291402076171068036548032381977184741778243810947202097002026583133103229115040414216968980627919985794378128894603186334221963211692252394535977554990491215621733091487550326776298499502932523408287882489799200954692353162958794137970552454035789701538315132727860436887544051794011893682559545564]
    e_list = [31, 71]  # different public exponents

    # through the bezout identity we find the gcd(e1,e2)
    gcd, u, v = egcd(e_list[0],e_list[1])
    #print(gcd)
    #print(u)
    #print(v)

    bezout_gcd = (u*e_list[0] + v*e_list[1])
    print("The gcd of e1 and e2 is: ", bezout_gcd)

    # if gcd is 1, then iroot is useless
    decrypted, exact = iroot(pow(c_list[0], u, n) * pow(c_list[1], v, n) % n, gcd)
    print("The decrypted message is: ", decrypted)

    print(decrypted.to_bytes(decrypted.bit_length()//8 + 1, byteorder='big').decode())





if __name__ == '__main__':
    common_modulus_attack()
