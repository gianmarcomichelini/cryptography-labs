from Crypto.Util.number import long_to_bytes



# sage document obtained from RSACTFtools: /Users/basics/PycharmProjects/Cryptography/Exercises/ctf/RSA/rsa-level-9-new/RsaCtfTool/src/RsaCtfTool/sage/boneh_durfee.sage
# low exponent attack (ran on Sage, on CoCalc)

# d < N^0.25 = root(d, 4)

n = 138728501052719695830997827983870257879591108626209095010716818754108501959050430927220695106906763908822395818876460759364322997020222845247478635848425558793671347756842735011885094468024344931360037542098264527076663690119553302046205282212602106990248442514444587909723612295871002063257141634196430659767
ct = 40254592670056897412607628206293101688805220813070436291135637864728213056255791064749974976546612178688674369066366922740751516162695397004586912385306024596939610039396946106249406597089442755317018963104229975283670995939592563335766562761230485826833361814955946571348001305529987233069227384314146133493
e = 60016485563460433620911462871489753027091796150597697863772440338904706321535832359517415034149374289955681381097544059467926029963755494161141305994584249448583991034102694954139120453335603006006970009433124857766494518747385902016093339683987307620366742481560543776055295663835860818720290861634213881385

print(n.bit_length())

print(long_to_bytes(n).hex())
print(long_to_bytes(ct).hex())
print(long_to_bytes(e).hex())


print(e.bit_length())

d = 130907063345211827271830776605143751868490159532968572514045305424799065327009793

if __name__ == "__main__":
    msg = pow(ct, d, n)
    print(long_to_bytes(msg).decode())